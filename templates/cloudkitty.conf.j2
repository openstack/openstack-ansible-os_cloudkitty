# {{ ansible_managed }}

[DEFAULT]
# Disable stderr logging
use_stderr = False
debug = {{ debug }}
notification_topics = {{ cloudkitty_notification_topics }}
use_journal = True

## Oslo Messaging RPC
transport_url = {{ cloudkitty_oslomsg_rpc_transport }}://{% for host in cloudkitty_oslomsg_rpc_servers.split(',') %}{{ cloudkitty_oslomsg_rpc_userid }}:{{ cloudkitty_oslomsg_rpc_password }}@{{ host }}:{{ cloudkitty_oslomsg_rpc_port }}{% if not loop.last %},{% else %}/{{ _cloudkitty_oslomsg_rpc_vhost_conf }}{% if cloudkitty_oslomsg_rpc_use_ssl | bool %}?ssl=1&ssl_version={{ cloudkitty_oslomsg_rpc_ssl_version }}&ssl_ca_file={{ cloudkitty_oslomsg_rpc_ssl_ca_file }}{% else %}?ssl=0{% endif %}{% endif %}{% endfor %}

[api]
port = {{ cloudkitty_service_port }}

[collect]
collector = {{ cloudkitty_collector }}

[collector_{{ cloudkitty_collector }}]
{% if cloudkitty_collector == 'gnocchi' %}
auth_section = keystone_authtoken
interface = internalURL
region_name = {{ cloudkitty_service_region }}
{% endif %}

[cors]

[cors.subdomain]

[database]
connection = {{ cloudkitty_database_connection }}
max_overflow = {{ cloudkitty_db_max_overflow }}
max_pool_size = {{ cloudkitty_db_max_pool_size }}
pool_timeout = {{ cloudkitty_db_pool_timeout }}
connection_recycle_time = {{ cloudkitty_db_connection_recycle_time }}

[fetcher]
backend = {{ cloudkitty_collector }}

[fetcher_{{ cloudkitty_collector }}]
{% if cloudkitty_collector == 'gnocchi' %}
auth_section = keystone_authtoken
interface = internalURL
region_name = {{ cloudkitty_service_region }}
{% endif %}

[keystone_authtoken]
memcached_servers = {{ cloudkitty_memcached_servers }}
www_authenticate_uri = {{ keystone_service_internaluri }}
project_domain_id = {{ cloudkitty_service_project_domain_id }}
project_name = {{ cloudkitty_service_project_name }}
user_domain_id = {{ cloudkitty_service_user_domain_id }}
password = {{ cloudkitty_service_password }}
username = {{ cloudkitty_service_user_name }}
auth_url = {{ keystone_service_adminurl }}
auth_type = {{ cloudkitty_keystone_auth_plugin }}
region_name = {{ cloudkitty_service_region }}
service_token_roles_required = {{ cloudkitty_service_token_roles_required | bool }}
service_token_roles = {{ cloudkitty_service_role_names | join(',') }}
service_type = {{ cloudkitty_service_type }}

[oslo_messaging_amqp]

[oslo_messaging_qpid]

[oslo_messaging_rabbit]
ssl = {{ cloudkitty_oslomsg_notify_use_ssl | bool }}
rabbit_quorum_queue = {{ cloudkitty_oslomsg_rabbit_quorum_queues }}
rabbit_transient_quorum_queue = {{ cloudkitty_oslomsg_rabbit_transient_quorum_queues }}
rabbit_qos_prefetch_count = {{ cloudkitty_oslomsg_rabbit_qos_prefetch_count }}
use_queue_manager = {{ cloudkitty_oslomsg_rabbit_queue_manager }}
rabbit_stream_fanout = {{ cloudkitty_oslomsg_rabbit_stream_fanout }}
rabbit_quorum_delivery_limit = {{ cloudkitty_oslomsg_rabbit_quorum_delivery_limit }}
rabbit_quorum_max_memory_bytes = {{ cloudkitty_oslomsg_rabbit_quorum_max_memory_bytes }}

[oslo_messaging_notifications]
driver = {{ (cloudkitty_oslomsg_notify_configure | bool) | ternary('messagingv2', 'noop') }}
transport_url = {{ cloudkitty_oslomsg_notify_transport }}://{% for host in cloudkitty_oslomsg_notify_servers.split(',') %}{{ cloudkitty_oslomsg_notify_userid }}:{{ cloudkitty_oslomsg_notify_password }}@{{ host }}:{{ cloudkitty_oslomsg_notify_port }}{% if not loop.last %},{% else %}/{{ _cloudkitty_oslomsg_notify_vhost_conf }}{% if cloudkitty_oslomsg_notify_use_ssl | bool %}?ssl=1&ssl_version={{ cloudkitty_oslomsg_notify_ssl_version }}&ssl_ca_file={{ cloudkitty_oslomsg_notify_ssl_ca_file }}{% else %}?ssl=0{% endif %}{% endif %}{% endfor %}

[output]
pipeline = {{ cloudkitty_output_pipeline }}
basepath = {{ cloudkitty_output_basepath }}
backend = {{ cloudkitty_output_backend }}

[state]

[storage]
backend = sqlalchemy
version = 1
